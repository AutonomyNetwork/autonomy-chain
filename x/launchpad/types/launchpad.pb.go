// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: launchpad/v1beta1/launchpad.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Launchpad struct {
	Id        uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator   string    `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	TokenId   uint64    `protobuf:"varint,3,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Supply    uint64    `protobuf:"varint,4,opt,name=supply,proto3" json:"supply,omitempty"`
	Softcap   uint64    `protobuf:"varint,5,opt,name=softcap,proto3" json:"softcap,omitempty"`
	Hardcap   uint64    `protobuf:"varint,6,opt,name=hardcap,proto3" json:"hardcap,omitempty"`
	StartTime time.Time `protobuf:"bytes,7,opt,name=startTime,proto3,stdtime" json:"startTime"`
	EndTime   time.Time `protobuf:"bytes,8,opt,name=endTime,proto3,stdtime" json:"endTime"`
	Status    string    `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Deposits  uint64    `protobuf:"varint,10,opt,name=deposits,proto3" json:"deposits,omitempty"`
}

func (m *Launchpad) Reset()         { *m = Launchpad{} }
func (m *Launchpad) String() string { return proto.CompactTextString(m) }
func (*Launchpad) ProtoMessage()    {}
func (*Launchpad) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8919382d78c3e36, []int{0}
}
func (m *Launchpad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Launchpad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Launchpad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Launchpad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Launchpad.Merge(m, src)
}
func (m *Launchpad) XXX_Size() int {
	return m.Size()
}
func (m *Launchpad) XXX_DiscardUnknown() {
	xxx_messageInfo_Launchpad.DiscardUnknown(m)
}

var xxx_messageInfo_Launchpad proto.InternalMessageInfo

type Launchpads struct {
	CreatedLaunchpads []uint64 `protobuf:"varint,1,rep,packed,name=CreatedLaunchpads,proto3" json:"CreatedLaunchpads,omitempty"`
	ActiveLaunchpads  []uint64 `protobuf:"varint,2,rep,packed,name=ActiveLaunchpads,proto3" json:"ActiveLaunchpads,omitempty"`
	SuccessLaunchpads []uint64 `protobuf:"varint,3,rep,packed,name=SuccessLaunchpads,proto3" json:"SuccessLaunchpads,omitempty"`
	FailLaunchpads    []uint64 `protobuf:"varint,4,rep,packed,name=FailLaunchpads,proto3" json:"FailLaunchpads,omitempty"`
}

func (m *Launchpads) Reset()         { *m = Launchpads{} }
func (m *Launchpads) String() string { return proto.CompactTextString(m) }
func (*Launchpads) ProtoMessage()    {}
func (*Launchpads) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8919382d78c3e36, []int{1}
}
func (m *Launchpads) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Launchpads) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Launchpads.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Launchpads) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Launchpads.Merge(m, src)
}
func (m *Launchpads) XXX_Size() int {
	return m.Size()
}
func (m *Launchpads) XXX_DiscardUnknown() {
	xxx_messageInfo_Launchpads.DiscardUnknown(m)
}

var xxx_messageInfo_Launchpads proto.InternalMessageInfo

func (m *Launchpads) GetCreatedLaunchpads() []uint64 {
	if m != nil {
		return m.CreatedLaunchpads
	}
	return nil
}

func (m *Launchpads) GetActiveLaunchpads() []uint64 {
	if m != nil {
		return m.ActiveLaunchpads
	}
	return nil
}

func (m *Launchpads) GetSuccessLaunchpads() []uint64 {
	if m != nil {
		return m.SuccessLaunchpads
	}
	return nil
}

func (m *Launchpads) GetFailLaunchpads() []uint64 {
	if m != nil {
		return m.FailLaunchpads
	}
	return nil
}

type DepositToLaunchpad struct {
	Id        uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Depositor string     `protobuf:"bytes,2,opt,name=depositor,proto3" json:"depositor,omitempty"`
	Amount    types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *DepositToLaunchpad) Reset()         { *m = DepositToLaunchpad{} }
func (m *DepositToLaunchpad) String() string { return proto.CompactTextString(m) }
func (*DepositToLaunchpad) ProtoMessage()    {}
func (*DepositToLaunchpad) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8919382d78c3e36, []int{2}
}
func (m *DepositToLaunchpad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositToLaunchpad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositToLaunchpad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositToLaunchpad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositToLaunchpad.Merge(m, src)
}
func (m *DepositToLaunchpad) XXX_Size() int {
	return m.Size()
}
func (m *DepositToLaunchpad) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositToLaunchpad.DiscardUnknown(m)
}

var xxx_messageInfo_DepositToLaunchpad proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Launchpad)(nil), "launchpad.v1beta1.Launchpad")
	proto.RegisterType((*Launchpads)(nil), "launchpad.v1beta1.Launchpads")
	proto.RegisterType((*DepositToLaunchpad)(nil), "launchpad.v1beta1.DepositToLaunchpad")
}

func init() { proto.RegisterFile("launchpad/v1beta1/launchpad.proto", fileDescriptor_a8919382d78c3e36) }

var fileDescriptor_a8919382d78c3e36 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x33, 0x6d, 0xed, 0x9f, 0x59, 0x58, 0xdc, 0x41, 0x24, 0x5b, 0x24, 0xad, 0x3d, 0x48,
	0x11, 0x4d, 0xd8, 0xf5, 0x20, 0x28, 0x08, 0xdb, 0x15, 0x41, 0x10, 0x0f, 0xb5, 0x5e, 0xbc, 0xc8,
	0x74, 0x32, 0xdb, 0x0e, 0x6d, 0xf2, 0x86, 0xcc, 0x64, 0xb5, 0x1f, 0x40, 0xf0, 0xb8, 0x1f, 0x61,
	0x3f, 0x88, 0x1f, 0x60, 0x8f, 0x7b, 0xf4, 0xe2, 0x1f, 0xda, 0x8b, 0x1f, 0x43, 0x66, 0x32, 0x49,
	0x8a, 0xd5, 0x83, 0xb7, 0x3c, 0xef, 0xef, 0x79, 0xdf, 0xcc, 0x3c, 0xbc, 0x83, 0xef, 0x2e, 0x69,
	0x16, 0xb3, 0x79, 0x42, 0xc3, 0xe0, 0xfc, 0x68, 0xca, 0x15, 0x3d, 0x0a, 0xca, 0x8a, 0x9f, 0xa4,
	0xa0, 0x80, 0x1c, 0x54, 0x05, 0x6b, 0xe9, 0xde, 0x9a, 0xc1, 0x0c, 0x0c, 0x0d, 0xf4, 0x57, 0x6e,
	0xec, 0xf6, 0x66, 0x00, 0xb3, 0x25, 0x0f, 0x8c, 0x9a, 0x66, 0x67, 0x81, 0x12, 0x11, 0x97, 0x8a,
	0x46, 0x89, 0x35, 0x78, 0x0c, 0x64, 0x04, 0x32, 0x98, 0x52, 0xc9, 0xcb, 0xdf, 0x31, 0x10, 0xf1,
	0x0e, 0x8f, 0x17, 0x25, 0xd7, 0xc2, 0xf2, 0xc3, 0x9c, 0xbf, 0xcf, 0xff, 0x9c, 0x0b, 0x8b, 0xfe,
	0x7a, 0xa2, 0xc1, 0xb7, 0x1a, 0xee, 0xbc, 0x2a, 0x4e, 0x4f, 0xf6, 0x71, 0x4d, 0x84, 0x2e, 0xea,
	0xa3, 0x61, 0x63, 0x5c, 0x13, 0x21, 0x71, 0x71, 0x8b, 0xa5, 0x9c, 0x2a, 0x48, 0xdd, 0x5a, 0x1f,
	0x0d, 0x3b, 0xe3, 0x42, 0x6a, 0xa2, 0x60, 0xc1, 0xe3, 0x97, 0xa1, 0x5b, 0x37, 0xf6, 0x42, 0x92,
	0xdb, 0xb8, 0x29, 0xb3, 0x24, 0x59, 0xae, 0xdc, 0x86, 0x01, 0x56, 0xe9, 0x0e, 0x09, 0x67, 0x8a,
	0xd1, 0xc4, 0xbd, 0x91, 0x77, 0x58, 0xa9, 0xc9, 0x9c, 0xa6, 0xa1, 0x26, 0xcd, 0x9c, 0x58, 0x49,
	0x46, 0xb8, 0x23, 0x15, 0x4d, 0xd5, 0x44, 0x44, 0xdc, 0x6d, 0xf5, 0xd1, 0x70, 0xef, 0xb8, 0xeb,
	0xe7, 0x19, 0xfa, 0x45, 0x86, 0xfe, 0xa4, 0xc8, 0x70, 0xd4, 0xbe, 0xfa, 0xde, 0x73, 0x2e, 0x7e,
	0xf4, 0xd0, 0xb8, 0x6a, 0x23, 0xcf, 0x70, 0x8b, 0xc7, 0xa1, 0x99, 0xd0, 0xfe, 0x8f, 0x09, 0x45,
	0x93, 0xb9, 0x8f, 0xa2, 0x2a, 0x93, 0x6e, 0xc7, 0x44, 0x60, 0x15, 0xe9, 0xe2, 0x76, 0xc8, 0x13,
	0x90, 0x42, 0x49, 0x17, 0x9b, 0x63, 0x97, 0xfa, 0x49, 0xfb, 0xf3, 0x65, 0xcf, 0xf9, 0x75, 0xd9,
	0x73, 0x06, 0x5f, 0x10, 0xc6, 0x65, 0xbe, 0x92, 0x3c, 0xc0, 0x07, 0xa7, 0x3a, 0x41, 0x1e, 0x56,
	0x45, 0x17, 0xf5, 0xeb, 0xc3, 0xc6, 0x78, 0x17, 0x90, 0xfb, 0xf8, 0xe6, 0x09, 0x53, 0xe2, 0x9c,
	0x6f, 0x99, 0x6b, 0xc6, 0xbc, 0x53, 0xd7, 0x93, 0xdf, 0x64, 0x8c, 0x71, 0x29, 0xb7, 0xcc, 0xf5,
	0x7c, 0xf2, 0x0e, 0x20, 0xf7, 0xf0, 0xfe, 0x0b, 0x2a, 0x96, 0x5b, 0xd6, 0x86, 0xb1, 0xfe, 0x51,
	0x1d, 0x7c, 0x42, 0x98, 0x3c, 0xcf, 0x6f, 0x35, 0x81, 0x7f, 0xef, 0xc9, 0x1d, 0xdc, 0xb1, 0x77,
	0x2f, 0x37, 0xa5, 0x2a, 0x90, 0xc7, 0xb8, 0x49, 0x23, 0xc8, 0x62, 0x65, 0x56, 0x65, 0xef, 0xf8,
	0xd0, 0xb7, 0x8b, 0xa9, 0xb7, 0xbc, 0x78, 0x31, 0xfe, 0x29, 0x88, 0x78, 0xd4, 0xd0, 0xf9, 0x8f,
	0xad, 0xbd, 0x8a, 0x71, 0xf4, 0xf6, 0x6a, 0xed, 0xa1, 0xeb, 0xb5, 0x87, 0x7e, 0xae, 0x3d, 0x74,
	0xb1, 0xf1, 0x9c, 0xeb, 0x8d, 0xe7, 0x7c, 0xdd, 0x78, 0xce, 0xbb, 0xa7, 0x33, 0xa1, 0xe6, 0xd9,
	0xd4, 0x67, 0x10, 0x05, 0x27, 0x99, 0x82, 0x18, 0xa2, 0xd5, 0x6b, 0xae, 0x3e, 0x40, 0xba, 0x08,
	0xa8, 0xd5, 0x0f, 0xd9, 0x9c, 0x8a, 0x38, 0xf8, 0x58, 0x3d, 0xdc, 0x40, 0xad, 0x12, 0x2e, 0xa7,
	0x4d, 0xb3, 0x02, 0x8f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x47, 0x3a, 0xff, 0x62, 0xe4, 0x03,
	0x00, 0x00,
}

func (m *Launchpad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Launchpad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Launchpad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deposits != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.Deposits))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintLaunchpad(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLaunchpad(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x42
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLaunchpad(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x3a
	if m.Hardcap != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.Hardcap))
		i--
		dAtA[i] = 0x30
	}
	if m.Softcap != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.Softcap))
		i--
		dAtA[i] = 0x28
	}
	if m.Supply != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.Supply))
		i--
		dAtA[i] = 0x20
	}
	if m.TokenId != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.TokenId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLaunchpad(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Launchpads) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Launchpads) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Launchpads) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FailLaunchpads) > 0 {
		dAtA4 := make([]byte, len(m.FailLaunchpads)*10)
		var j3 int
		for _, num := range m.FailLaunchpads {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintLaunchpad(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SuccessLaunchpads) > 0 {
		dAtA6 := make([]byte, len(m.SuccessLaunchpads)*10)
		var j5 int
		for _, num := range m.SuccessLaunchpads {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintLaunchpad(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ActiveLaunchpads) > 0 {
		dAtA8 := make([]byte, len(m.ActiveLaunchpads)*10)
		var j7 int
		for _, num := range m.ActiveLaunchpads {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintLaunchpad(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreatedLaunchpads) > 0 {
		dAtA10 := make([]byte, len(m.CreatedLaunchpads)*10)
		var j9 int
		for _, num := range m.CreatedLaunchpads {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintLaunchpad(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DepositToLaunchpad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositToLaunchpad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositToLaunchpad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLaunchpad(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintLaunchpad(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLaunchpad(dAtA []byte, offset int, v uint64) int {
	offset -= sovLaunchpad(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Launchpad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLaunchpad(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLaunchpad(uint64(l))
	}
	if m.TokenId != 0 {
		n += 1 + sovLaunchpad(uint64(m.TokenId))
	}
	if m.Supply != 0 {
		n += 1 + sovLaunchpad(uint64(m.Supply))
	}
	if m.Softcap != 0 {
		n += 1 + sovLaunchpad(uint64(m.Softcap))
	}
	if m.Hardcap != 0 {
		n += 1 + sovLaunchpad(uint64(m.Hardcap))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovLaunchpad(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovLaunchpad(uint64(l))
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovLaunchpad(uint64(l))
	}
	if m.Deposits != 0 {
		n += 1 + sovLaunchpad(uint64(m.Deposits))
	}
	return n
}

func (m *Launchpads) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CreatedLaunchpads) > 0 {
		l = 0
		for _, e := range m.CreatedLaunchpads {
			l += sovLaunchpad(uint64(e))
		}
		n += 1 + sovLaunchpad(uint64(l)) + l
	}
	if len(m.ActiveLaunchpads) > 0 {
		l = 0
		for _, e := range m.ActiveLaunchpads {
			l += sovLaunchpad(uint64(e))
		}
		n += 1 + sovLaunchpad(uint64(l)) + l
	}
	if len(m.SuccessLaunchpads) > 0 {
		l = 0
		for _, e := range m.SuccessLaunchpads {
			l += sovLaunchpad(uint64(e))
		}
		n += 1 + sovLaunchpad(uint64(l)) + l
	}
	if len(m.FailLaunchpads) > 0 {
		l = 0
		for _, e := range m.FailLaunchpads {
			l += sovLaunchpad(uint64(e))
		}
		n += 1 + sovLaunchpad(uint64(l)) + l
	}
	return n
}

func (m *DepositToLaunchpad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLaunchpad(uint64(m.Id))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovLaunchpad(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLaunchpad(uint64(l))
	return n
}

func sovLaunchpad(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLaunchpad(x uint64) (n int) {
	return sovLaunchpad(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Launchpad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLaunchpad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Launchpad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Launchpad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			m.TokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			m.Supply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Supply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Softcap", wireType)
			}
			m.Softcap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Softcap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hardcap", wireType)
			}
			m.Hardcap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hardcap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			m.Deposits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deposits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLaunchpad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Launchpads) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLaunchpad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Launchpads: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Launchpads: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLaunchpad
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CreatedLaunchpads = append(m.CreatedLaunchpads, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLaunchpad
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLaunchpad
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLaunchpad
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CreatedLaunchpads) == 0 {
					m.CreatedLaunchpads = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLaunchpad
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CreatedLaunchpads = append(m.CreatedLaunchpads, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedLaunchpads", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLaunchpad
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActiveLaunchpads = append(m.ActiveLaunchpads, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLaunchpad
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLaunchpad
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLaunchpad
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ActiveLaunchpads) == 0 {
					m.ActiveLaunchpads = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLaunchpad
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActiveLaunchpads = append(m.ActiveLaunchpads, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveLaunchpads", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLaunchpad
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SuccessLaunchpads = append(m.SuccessLaunchpads, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLaunchpad
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLaunchpad
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLaunchpad
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SuccessLaunchpads) == 0 {
					m.SuccessLaunchpads = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLaunchpad
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SuccessLaunchpads = append(m.SuccessLaunchpads, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessLaunchpads", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLaunchpad
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FailLaunchpads = append(m.FailLaunchpads, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLaunchpad
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLaunchpad
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLaunchpad
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FailLaunchpads) == 0 {
					m.FailLaunchpads = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLaunchpad
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FailLaunchpads = append(m.FailLaunchpads, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FailLaunchpads", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLaunchpad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositToLaunchpad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLaunchpad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositToLaunchpad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositToLaunchpad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLaunchpad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLaunchpad(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLaunchpad
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLaunchpad
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLaunchpad
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLaunchpad
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLaunchpad        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLaunchpad          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLaunchpad = fmt.Errorf("proto: unexpected end of group")
)
