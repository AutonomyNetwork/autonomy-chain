syntax = "proto3";
package AutonomyNetwork.autonomychain.issuance.v1;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "issuance/v1/token.proto";

option go_package = "github.com/AutonomyNetwork/autonomy-chain/x/issuance/types";

// Query defines the gRPC querier service.
service Query {
  // this line is used by starport scaffolding # 2

  // Queries a token by id.
  rpc Token(QueryGetTokenRequest) returns (QueryGetTokenResponse) {
    option (google.api.http).get = "/AutonomyNetwork/autonomychain/issuance/token/{id}";
  }

  // Queries a list of token items.
  rpc TokenAll(QueryAllTokenRequest) returns (QueryAllTokenResponse) {
    option (google.api.http).get = "/AutonomyNetwork/autonomychain/issuance/tokens";
  }

}

// this line is used by starport scaffolding # 3
message QueryGetTokenRequest {
  uint64 id = 1;
}

message QueryGetTokenResponse {
  Token Token = 1;
}

message QueryAllTokenRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTokenResponse {
  repeated Token Token = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
